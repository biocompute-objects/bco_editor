#!/usr/bin/env python
import os,sys
import string
import cgi
import commands

from optparse import OptionParser
import json
import time
import datetime
import bcrypt
import util

import pymongo
from pymongo import MongoClient




__version__="1.0"
__status__ = "Dev"





#################################
def main():

    usage = "\n%prog  [options]"
    parser = OptionParser(usage,version="%prog " + __version__)
    msg = "list_users|upsert_user|delete_user|reset_bcocounter|delete_bco|list_bco"
    parser.add_option("-a","--action",action="store",dest="action",help=msg)
    msg =""
    parser.add_option("-f","--fname",action="store",dest="fname",help=msg)
    parser.add_option("-l","--lname",action="store",dest="lname",help=msg)
    parser.add_option("-e","--email",action="store",dest="email",help=msg)
    parser.add_option("-p","--password",action="store",dest="password",help=msg)
    parser.add_option("-s","--status",action="store",dest="status",help=msg)
    parser.add_option("-o","--bcoid",action="store",dest="bcoid",help="Id object")

    (options,args) = parser.parse_args()
    for key in ([options.action]):
        if not (key):
            parser.print_help()
            sys.exit(0)


    config_json = json.loads(open("./conf/config.json", "r").read())
    log_dir = config_json["pathinfo"]["htmlpath"] + "/log/"
        
    client = MongoClient('mongodb://localhost:27017', 
        username=config_json["dbinfo"]["mongodbuser"],
        password=config_json["dbinfo"]["mongodbpassword"],
        authSource=config_json["dbinfo"]["mongodbname"],
        authMechanism='SCRAM-SHA-1'
    )
        
    mongo_dbh = client[config_json["dbinfo"]["mongodbname"]]
    mongo_cl_bco = mongo_dbh[config_json["dbinfo"]["mongocl_bco"]]
    mongo_cl_counters = mongo_dbh[config_json["dbinfo"]["mongocl_counters"]]
    mongo_cl_users = mongo_dbh[config_json["dbinfo"]["mongocl_users"]]



    if options.action == "list_users":
        print "#status,fname,lname,email"
        for doc in mongo_cl_users.find({}):
            print "%s,%s,%s,%s" % (doc["status"],doc["fname"],doc["lname"],doc["email"])
    elif options.action == "list_bco":
        print "#bco_id|name|createdby"
        for doc in mongo_cl_bco.find({}):
            name = doc["provenance_domain"]["name"]
            createdby = ""
            for obj in doc["provenance_domain"]["contributors"]:
                if "createdBy" in obj["contribution"]:
                    createdby = obj["email"]
                    break
            print "%s|%s|%s" % (doc["bco_id"], name, createdby)
    elif options.action == "delete_user":
        if not (options.email):
            parser.print_help()
            sys.exit(0)
        query_obj = {"email":options.email}
        res = mongo_cl_users.delete_one(query_obj)
    elif options.action == "upsert_user":
        for key in ([options.fname,options.lname,options.email,options.password, options.status]):
            if not (key):
                parser.print_help()
                sys.exit(0)
        query_obj = {'email': options.email}
        update_obj = {
            "fname":options.fname,
            "lname":options.lname,
            "email":options.email,
            "password":options.password,
            "status":int(options.status)
        }
        res = mongo_cl_users.update_one(query_obj, {'$set': update_obj}, upsert=True)
    elif options.action == "reset_bcocounter":
        if mongo_cl_bco.find({}).count() == 0:
            util.reset_sequence_value(mongo_cl_counters, "bcoid")
        else:
            print "collection c_bco is not empty"

    elif options.action == "delete_bco":
        if not (options.bcoid):
            parser.print_help()
            sys.exit(0)
        query_obj = {"bco_id":int(options.bcoid)}
        res = mongo_cl_bco.delete_one(query_obj)






if __name__ == '__main__':
        main()



