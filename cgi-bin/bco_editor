#!/usr/bin/python
import os,sys
import string
import cgi
import commands
from optparse import OptionParser
import traceback
import json
import re
import time
import datetime
import auth
import util
import bio_hash
import bcrypt
import hashlib
import requests
import pdb
from dateutil.parser import parse

import pymongo
from pymongo import MongoClient
import jsonref
from jsonschema import validate
import threading
import warnings
from requests.packages.urllib3.exceptions import InsecureRequestWarning

__version__="1.0"

def make_correct_data(input_json):
    
    try:
        del input_json['name']
    except:
        pass
    try:
        del input_json['version']
    except:
        pass
    try:
        del input_json['license']
    except:
        pass
    try:
        del input_json['contributors']
    except:
        pass
    try:
        del input_json['created']
    except:
        pass
    try:
        del input_json['modified']
    except:
        pass


    for i in range(len(input_json['description_domain']['pipeline_steps'])):
        for j in range(len(input_json['description_domain']['pipeline_steps'][i]['input_list'])):
            try:
                del input_json['description_domain']['pipeline_steps'][i]['input_list'][j]['sha1_chksum']
            except:
                pass
        for j in range(len(input_json['description_domain']['pipeline_steps'][i]['output_list'])):
            try:
                del input_json['description_domain']['pipeline_steps'][i]['output_list'][j]['sha1_chksum']
            except:
                pass
        try:
            for j in range(len(input_json['description_domain']['pipeline_steps'][i]['prerequisite'])):
                try:
                    del input_json['description_domain']['pipeline_steps'][i]['prerequisite'][j]['sha1_chksum']
                except:
                    pass
        except:
            pass

    for i in range(len(input_json['execution_domain']['software_prerequisites'])):
        try:
            if input_json['execution_domain']['software_prerequisites'][i]['uri']['sha1_chksum']: 
                input_json['execution_domain']['software_prerequisites'][i]['uri']['sha1_checksum'] = input_json['execution_domain']['software_prerequisites'][i]['uri'].pop('sha1_chksum')
            else:
                del input_json['execution_domain']['software_prerequisites'][i]['uri']['sha1_chksum']
        except:
            pass
    for i in range(len(input_json['execution_domain']['script'])):
        try:
            if input_json['execution_domain']['script'][i]['uri']['sha1_chksum']:
                input_json['execution_domain']['script'][i]['uri']['sha1_checksum'] = input_json['execution_domain']['script'][i]['uri'].pop('sha1_chksum')
            else:
                del input_json['execution_domain']['script'][i]['uri']['sha1_chksum']
        except:
            pass

    for i in range(len(input_json['io_domain']['input_subdomain'])):
        try:
            if input_json['io_domain']['input_subdomain'][i]['uri']['sha1_chksum']:
                input_json['io_domain']['input_subdomain'][i]['uri']['sha1_checksum'] = input_json['io_domain']['input_subdomain'][i]['uri'].pop('sha1_chksum')
            else:
                del input_json['io_domain']['input_subdomain'][i]['uri']['sha1_chksum']
        except:
            pass
    for i in range(len(input_json['io_domain']['output_subdomain'])):
        try:
            if input_json['io_domain']['output_subdomain'][i]['uri']['sha1_chksum']:
                input_json['io_domain']['output_subdomain'][i]['uri']['sha1_checksum'] = input_json['io_domain']['output_subdomain'][i]['uri'].pop('sha1_chksum')
            else:
                del input_json['io_domain']['output_subdomain'][i]['uri']['sha1_chksum']
        except:
            pass
    
    return input_json

def save_object(in_json, logged_email):
    # validating json data with schema
    
    try:
        mainschema_file = config_json["pathinfo"]["schemapath"] + "biocomputeobject.json"
        schema_file = open(mainschema_file, "r")
        base_uri = 'file://{}/'.format(os.path.dirname(schema_file.name))
        schema = jsonref.load(schema_file, base_uri=base_uri, jsonschema=True)        
    except Exception as e:
        out_json = util.log_error(mongo_cl_log, traceback.format_exc())
        return out_json

    out_json = {}
    util.log_error(mongo_cl_log, 'bco_id', 'msg')
    real_id = bco_id = in_json["bco_id"]

    # pdb.set_trace()
    try:
        data = bio_hash.hashed_object(in_json)
        if bco_id != "-1":
            doc = mongo_cl_bco.find_one({"bco_id":bco_id})
            creator_list = []
            for o in doc["provenance_domain"]["contributors"]:
                if "createdBy" in o["contribution"] or "authoredBy" in o["contribution"]:
                    if "email" in o:
                        creator_list.append(o["email"])
            if logged_email not in creator_list:
                return {"taskstatus":0, "errormsg":"You do not have privilege to change this object!"}
            else:
                in_json["provenance_domain"]["modified"] = datetime.datetime.now().isoformat()
                data = bio_hash.hashed_object(in_json)

                #in_json["provenance_domain"]["modified"] = datetime.datetime.now().strftime("%b %d, %Y %H:%M:%S")
                validate(in_json, schema)                    
                
                data.pop("bco_id")
                result = mongo_cl_bco.update_one({"bco_id":bco_id}, {'$set': data}, upsert=False)
                return {"taskstatus": 1, "bcoid":bco_id}
        else:

            doc = mongo_cl_bco.find_one({"checksum":data["checksum"]})
            if doc != None:
                return {"taskstatus":0, "errormsg":"Error. We found an exact copy of your BCO in our database. Duplicate BCOs cannot be submitted!"}            
            else:
                bco_id = util.get_next_sequence_value(mongo_cl_counters, "bcoid")
                bco_str_id = "000000"[0:6-len(str(bco_id))] + str(bco_id)
                bco_url = config_json["pathinfo"]["bcoprefix"] % (bco_str_id)
                data["bco_id"] = bco_url
                data["provenance_domain"]["created"] = datetime.datetime.now().isoformat()
                data["provenance_domain"]["contributors"] = [
                    {
                        "name": "", 
                        "affiliation": "", 
                        "email": logged_email,
                        "orcid": "", 
                        "contribution": ["createdBy"]
                    }
                ]
                validate(data, schema)
                data = bio_hash.hashed_object(data)
                result = mongo_cl_bco.insert_one(data)
                out_json = {"bcoid":bco_url, "taskstatus":1}
    except Exception as e:
        util.add_id(mongo_cl_invalid, real_id)
        out_json = util.log_error(mongo_cl_log, traceback.format_exc(), str(e))

    return out_json

def save_permit(in_json, logged_email):
    bco_id = in_json['bcoId']
    bco = mongo_cl_bco.find_one({"bco_id":bco_id})
    contributors = bco['provenance_domain']['contributors']
    selected_users = in_json['user']
    selected_permit = in_json['permission']
    existed = False
    existed_index = -1
    for selected_user in selected_users:
        for index, contributor in enumerate(contributors):
            if contributor['email'] == selected_user:
                existed = True
                existed_index = index
                break

        if existed:
            contributors[existed_index]['contribution'] = [selected_permit]
        else:
            contributors.append({
                "email": selected_user,
                "contribution": [selected_permit],
                "name": "",
                "orcid": "", 
                "affiliation": "", 
                })
    bco['provenance_domain']['contributors'] = contributors
    bco.pop('_id')
    bco.pop('bco_id')
    mongo_cl_bco.update_one({"bco_id":bco_id}, {'$set': bco}, upsert=False)


def read_file():
    result = []
    with open('correct.json', 'r') as f:
        data = json.load(f)
        for item in data:
            save_object(item, '')

def import_bcos(in_json, logged_email):
    bco_domain = "https://data.glygen.org"
    bco_version = "v-1.0.13"
    file_obj = open('input1.json', 'a')
    file_obj.write('[')
    for i in xrange(1,1000):
        bco_id = "DSBCO_000000"[0:12-len(str(i))] + str(i)
        bco_url = "%s/%s/%s" % (bco_domain, bco_id, bco_version)
        try:
            with warnings.catch_warnings():
                warnings.filterwarnings('ignore', category=InsecureRequestWarning)
                response = requests.get(bco_url, verify=False)            
                if response.content.strip() != "":
                    bco_obj = json.loads(response.content)
                    file_obj.write(response.content)
                    file_obj.write(', \n')
        except Exception as e:
            pdb.set_trace()
            util.log_error(mongo_cl_log, str(e), str(e))

    bco_domain = "https://data.oncomx.org"
    bco_version = "v-1.0.6"
    for i in xrange(1,1000):
        bco_id = "DSBCO_000000"[0:12-len(str(i))] + str(i)
        bco_url = "%s/%s/%s" % (bco_domain, bco_id, bco_version)
        try:
            with warnings.catch_warnings():
                warnings.filterwarnings('ignore', category=InsecureRequestWarning)
                response = requests.get(bco_url, verify=False)            
                if response.content.strip() != "":
                    bco_obj = json.loads(response.content)
                    file_obj.write(response.content)
                    file_obj.write(', \n')
        except Exception as e:
            pdb.set_trace()
            util.log_error(mongo_cl_log, str(e), str(e))

    file_obj.write(']')
    file_obj.close()
    return {"result": True}

def check_doc_embargo(provenance_domain, logged_email):
    contributors = provenance_domain['contributors']
    if "embargo" in provenance_domain:
        if "start_time" in provenance_domain["embargo"] and "end_time" in provenance_domain["embargo"]:
            start_time = provenance_domain["embargo"]["start_time"]
            end_time = provenance_domain["embargo"]["end_time"]
            if logged_email:
                for o in provenance_domain["contributors"]:
                    if 'createdBy' in o['contribution'] and logged_email == o['email']:
                        return True
                    else:
                        return False

            if start_time and end_time:
                now = datetime.datetime.now()
                start_time = parse(start_time, ignoretz=True)
                end_time = parse(end_time, ignoretz=True)
                if start_time < now and end_time > now:
                    return True
                else:
                    return False

    return True

def search_objects(in_json, logged_email):
    try:
        query_obj = {}
        if in_json["queryvalue"] != "":
            query = str(in_json["queryvalue"])
            cond_objs = []
            cond_objs.append({"bco_id":{'$regex':query, '$options': 'i'}})
            cond_objs.append({"provenance_domain.name":{'$regex':query, '$options': 'i'}})
            cond_objs.append({"provenance_domain.contributors.name":{'$regex':query, '$options': 'i'}})
            query_obj = { "$or": cond_objs }
        row = []
        obj_list = []
        obj_list.append(config_json["tableheaders"]["searchresults"]["labellist"])
        obj_list.append(config_json["tableheaders"]["searchresults"]["typelist"])

        for doc in mongo_cl_bco.find(query_obj):
            if "provenance_domain" not in doc:
                continue
            tv_list = ["name" in doc["provenance_domain"]]
            tv_list += ["created" in doc["provenance_domain"]]
            tv_list += ["contributors" in doc["provenance_domain"]]
            if False in tv_list:
                continue
            tv_list = [len(doc["provenance_domain"]["contributors"]) > 0]

            if False in tv_list:
                continue

            if not check_doc_embargo(doc["provenance_domain"], logged_email):
                continue

            doc.pop("_id")
            created_by = doc["provenance_domain"]["contributors"][0]["email"]
            bco_id = str(doc["bco_id"])
            creators = []
            owner = ''
            for o in doc["provenance_domain"]["contributors"]:
                if "createdBy" in o["contribution"]:
                    owner = o["name"] if o["name"].strip() != "" else o["email"]
                else:
                    val = o["name"] if o["name"].strip() != "" else o["email"]
                    creators.append(val)
            row = [
                bco_id
                ,doc["provenance_domain"]["name"]
                ,doc["provenance_domain"]["created"]
                ,owner
                ,", ".join(creators)
            ]
            obj_list.append(row)
        
        taskstatus = 1
        out_json = {}
        out_json["searchresults"] = obj_list
        out_json["taskstatus"] = taskstatus
    except Exception, e:
        out_json = util.log_error(mongo_cl_log, traceback.format_exc())


        
    return out_json


def get_object_view_json(in_json, logged_email):
 
    out_json = {}
    try:
        doc = mongo_cl_bco.find_one({"bco_id":in_json["bcoid"]})
        if doc == None:
            out_json = {"taskstatus":0, "errormsg":"Object does not exist!"}
        else:
            doc.pop("_id")
            if check_doc_embargo(doc["provenance_domain"], logged_email):
                out_json = {"bco":doc, "creators":[]}
                for o in doc["provenance_domain"]["contributors"]:
                    if "email" in o:
                        if "createdBy" in o["contribution"]:
                            out_json["creators"].append(o["email"])
                        if logged_email == o["email"]:
                            out_json["permission"] = o["contribution"][0]
                            out_json["editflag"] = out_json["permission"] in ["createdBy", "authoredBy"]

                out_json["creators"] = sorted(set(out_json["creators"]))
                ordr_dict = json.loads(open("conf/field_order.json").read())
                out_json["bco"] = util.order_json_obj(out_json["bco"],ordr_dict)
            else:
                out_json = {"bco": -1}
    except Exception, e:
        out_json = util.log_error(mongo_cl_log, traceback.format_exc())

    return out_json

def get_schema(internal=False):
    mainschema_file = config_json["pathinfo"]["schemapath"] + "biocomputeobject.json"

    schema_file = open(mainschema_file, "r")
    base_uri = 'file://{}/'.format(os.path.dirname(schema_file.name))
    schema = jsonref.load(schema_file, base_uri=base_uri, jsonschema=True)
    schema['properties']['provenance_domain']['propertyOrder'] = 4
    schema['properties']['usability_domain']['propertyOrder'] = 5
    schema['properties']['description_domain']['propertyOrder'] = 7
    schema['properties']['execution_domain']['propertyOrder'] = 8
    schema['properties']['parametric_domain']['propertyOrder'] = 9  
    schema['properties']['io_domain']['propertyOrder'] = 10
    schema['properties']['error_domain']['propertyOrder'] = 11
    schema['properties']['bco_id']['propertyOrder'] = 1
    schema['properties']['bco_spec_version']['propertyOrder'] = 2
    schema['properties']['checksum']['propertyOrder'] = 3
    schema['properties']['extension_domain']['propertyOrder'] = 6  
    
    schema['properties']['provenance_domain']['properties']['license']['propertyOrder'] = 1
    schema['properties']['provenance_domain']['properties']['name']['propertyOrder'] = 2
    schema['properties']['provenance_domain']['properties']['version']['propertyOrder'] = 3
    schema['properties']['provenance_domain']['properties']['created']['propertyOrder'] = 4
    schema['properties']['provenance_domain']['properties']['modified']['propertyOrder'] = 5
    schema['properties']['provenance_domain']['properties']['contributors']['propertyOrder'] = 6
    schema['properties']['provenance_domain']['properties']['review']['propertyOrder'] = 7
    schema['properties']['provenance_domain']['properties']['embargo']['propertyOrder'] = 8
    schema['properties']['provenance_domain']['properties']['derived_from']['propertyOrder'] = 9
    schema['properties']['provenance_domain']['properties']['obsolete_after']['propertyOrder'] = 10
    

    return schema

def get_users_json(in_json, owner_email):
    out_json={}
    if in_json['bcoid'] == "-1":
        out_json = {"taskstatus":0, "errormsg":"Object does not exist!"}
    else:
        bco_json = mongo_cl_bco.find_one({"bco_id":in_json["bcoid"]})
        if not bco_json:
            out_json = {"taskstatus":0, "errormsg":"Object does not exist!"}
        else:
            contributors = bco_json['provenance_domain']['contributors']
            all_users = []
            all_list = []
            for doc in mongo_cl_users.find({ 'email': {'$ne': owner_email}, 'status': 1}, {'_id': 0, 'email': 1, 'lname': 1, 'fname': 1 }):
                all_users.append(doc)
            for contributor in contributors:
                for user in all_users:
                    if user['email'] == contributor['email']:
                        all_list.append({
                            'permission': contributor['contribution'],
                            'fname': user['fname'],
                            'lname': user['lname'],
                            'email': user['email']
                            })

            out_json['users'] = all_users
            out_json['list'] = all_list
    return out_json


def get_object_edit_json(in_json):
    try:
        bco_json = {}
        if in_json["bcoid"] != "-1":
            bco_json = mongo_cl_bco.find_one({"bco_id":in_json["bcoid"]})
            if bco_json == None:
                out_json = {"taskstatus":0, "errormsg":"Object does not exist!"}
            else:
                if "_id" in bco_json:
                    bco_json.pop("_id")
        else:
            bco_json = {
                "bco_id":"-1",
                "bco_spec_version":config_json["specversion"],
                "checksum":"",
                "created":"",
                "modified":"",
                "provenance_domain":{},
                "usability_domain":[],
                "error_domain":{}
            }
            
        
        domain_list  = [
            "provenance_domain", 
            "usability_domain", 
            "execution_domain", 
            "description_domain",
            "parametric_domain",
            "io_domain",
            "error_domain"
        ]

        out_json = {"schema":get_schema()}
        out_json["startval"]= {
            "bco_id":bco_json["bco_id"],
            "bco_spec_version":bco_json["bco_spec_version"],
            "checksum": bco_json["checksum"],
        }
        for domain in domain_list + ["extension_domain"]:
            out_json["startval"][domain] = bco_json[domain] if domain in bco_json else {}
        
        # ordr_dict = json.loads(open("conf/field_order.json").read())
        # out_json["startval"] = util.order_json_obj(out_json["startval"],ordr_dict) 
        out_json["taskstatus"] = 1
    except Exception, e:
        out_json = util.log_error(mongo_cl_log, traceback.format_exc())
    return out_json

#~~~~~~~~~~~~~~~~~~~~~
def main():
    
    usage = "\n%prog  [options]"
    parser = OptionParser(usage,version="%prog " + __version__)
    msg = "Input JSON text"
    parser.add_option("-j","--injson",action="store",dest="injson",help=msg)


    form_dict = cgi.FieldStorage()
    (options,args) = parser.parse_args()

    local_flag = False
    in_json = {}
    if len(form_dict.keys()) > 0:
        in_json = json.loads(form_dict["injson"].value) if "injson" in form_dict else {}
    else:
        local_flag = True
        for key in ([options.injson]):
            if not (key):
                parser.print_help()
                sys.exit(0)
        in_json = json.loads(options.injson)

    global config_json
    global mongo_cl
    global mongo_cl_bco
    global mongo_cl_counters
    global mongo_cl_users
    global mongo_cl_log
    global mongo_cl_invalid
    global client

    print "Content-Type: application/json"
    print

    try:
        config_json = json.loads(open("conf/config.json", "r").read())
        if os.path.exists("conf/config.custom.json"):
            custom_config_json = json.loads(open("conf/config.custom.json", "r").read())
            for k_one in custom_config_json:
                for k_two in custom_config_json[k_one]:
                    if k_one in config_json:
                        if k_two in config_json[k_one]:
                            config_json[k_one][k_two] = custom_config_json[k_one][k_two]
    except Exception, e:
        print(e)
        out_json = {"taskstatus":0, "errormsg":"Loading config failed!"}
        print json.dumps(out_json, indent=4)
        sys.exit()

    try:
        client = MongoClient('mongodb://localhost:27017',
            username=config_json["dbinfo"]["mongodbuser"],
            password=config_json["dbinfo"]["mongodbpassword"],
            authSource=config_json["dbinfo"]["mongodbname"],
            authMechanism='SCRAM-SHA-1',
            serverSelectionTimeoutMS=10000
        )
        client.server_info()
        mongo_dbh = client[config_json["dbinfo"]["mongodbname"]]
        mongo_cl_bco = mongo_dbh[config_json["dbinfo"]["collections"]["bco"]]
        mongo_cl_counters = mongo_dbh[config_json["dbinfo"]["collections"]["counters"]]
        mongo_cl_users = mongo_dbh[config_json["dbinfo"]["collections"]["users"]]
        mongo_cl_log = mongo_dbh[config_json["dbinfo"]["collections"]["log"]]
        mongo_cl_invalid = mongo_dbh[config_json["dbinfo"]["collections"]["invalid_id"]]
        # pdb.set_trace()
        try:
            logged_email=''
            svc = in_json["svc"] if "svc" in in_json else ""
            auth_obj = {"status": 0}
            if svc not in ["search_objects_no_auth", "login_user", "register_user"]:
                auth_obj = auth.authenticate(mongo_cl_log)
                logged_email = auth_obj["email"] if auth_obj["status"] == 1 else ""

            if svc == "login_user":
                out_json = {}
                auth_obj = auth.login(mongo_cl_users, in_json, config_json["dbinfo"]["sessionlife"],mongo_cl_log)
                logged_email = auth_obj["email"] if auth_obj["status"] == 1 else ""
            elif svc == "register_user":
                out_json = auth.register_user(mongo_cl_users, in_json, mongo_cl_log)
            elif svc == "get_profile" and (auth_obj["status"] == 1 or local_flag):
                out_json = auth.get_profile(mongo_cl_users, auth_obj, config_json["profileinfo"], mongo_cl_log)
            elif svc == "save_profile" and (auth_obj["status"] == 1 or local_flag):
                out_json = auth.save_user(mongo_cl_users, in_json, logged_email, mongo_cl_log)
            elif svc == "reset_password" and (auth_obj["status"] == 1 or local_flag):
                current_pass, new_pass = in_json["passwordone"], in_json["passwordtwo"]
                out_json = auth.reset_password(mongo_cl_users, logged_email, current_pass,new_pass, mongo_cl_log)
            elif svc == "save_permit" and (auth_obj["status"] == 1 or local_flag):
                save_permit(in_json, logged_email)
                out_json = {"result": True}
            elif svc == "search_objects" or svc == "search_objects_no_auth":
                out_json = search_objects(in_json, logged_email)
            elif svc == "importbcos"  and (auth_obj["status"] == 1 or local_flag):
                import_bcos(in_json, logged_email)
                out_json = {"result": True}
            elif svc == "get_object_view_json":
                out_json = get_object_view_json(in_json, logged_email)
            elif svc == "get_object_edit_json" and (auth_obj["status"] == 1 or local_flag):
                out_json = get_object_edit_json(in_json)
            elif svc == "get_users_json" and (auth_obj["status"] == 1 or local_flag):
                out_json = get_users_json(in_json, logged_email)
            elif svc == "save_object" and (auth_obj["status"] == 1 or local_flag):
                out_json = save_object(in_json["bco"], logged_email)
            else:
                out_json = {"taskstatus":0, "errormsg":"Submitted service does not exist!"}
            out_json["auth"] = auth_obj
        except Exception, e:
            out_json = util.log_error(mongo_cl_log, traceback.format_exc())

    except pymongo.errors.ServerSelectionTimeoutError as err:
        out_json = {"taskstatus":0, "errormsg":"Connection to mongodb failed!"}
    except pymongo.errors.OperationFailure as err:
        print err
        return err
        out_json = {"taskstatus":0, "errormsg":"MongoDB auth failed!"}

    
    out_json["editorversion"] = config_json["editorversion"]
    print json.dumps(out_json, indent=4)



if __name__ == '__main__':
    main()



